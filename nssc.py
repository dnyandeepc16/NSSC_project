# -*- coding: utf-8 -*-
"""Copy of NSSC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGJGiUExTLzgxHJBZ1wwTrKc4s4fKl-e

# **Importing required libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
import seaborn as sns

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import accuracy_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import mutual_info_classif
from sklearn.naive_bayes import GaussianNB
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV
from numpy import mean
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
from imblearn.ensemble import BalancedRandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import plot_roc_curve

from google.colab import drive
drive.mount('/content/drive')

train_dataset = pd.read_csv('/content/drive/MyDrive/CodeFiles/NSSC/train_NoNTTqq.csv')
test_dataset = pd.read_csv('/content/drive/MyDrive/CodeFiles/NSSC/test_SxgqOdc.csv')

test_X = test_dataset.drop('id', axis = 1)

test_X.head()

len(train_dataset), len(test_dataset)

"""# **Exploratory Analysis**"""

train_dataset.head()

train_dataset.info()

train_dataset.nunique().to_frame().transpose()

occurrences = train_dataset['stellar'].value_counts().to_frame().rename(index=str, columns={'stellar': 'Occurrences'})
occurrences

sns.countplot(train_dataset['stellar'],label="Count")
plt.show()

X = train_dataset.drop(['id', 'stellar'], axis = 1)
y = train_dataset['stellar']

x_t = test_X.values
x_t

scaling = MinMaxScaler(feature_range = (-1,1)).fit(X)
x_scaled = scaling.transform(X)
x_test_scaled = scaling.transform(x_t)

# Feature Selection
# Numerical input and Classification output
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif
fs = f_classif(X, y)

X.head()

X.shape

X = X.iloc[ : 13491]
y = y.iloc[ : 13491]

"""# **Building the Random Forest Classifier**

## Training and Test Set Split
"""

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

def rrf(X,y):
    model = RandomForestClassifier(n_estimators=10)
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)
    scores = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)

    m = mean(scores)

    return m

def brf(X,y):
    model = BalancedRandomForestClassifier(n_estimators=10)
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state = 25)
    scores  = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)
    
    m = mean(scores)
    
    return m

def nb(X,y):
    model = GaussianNB()
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)
    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)
    
    m = mean(scores)
    
    return m

def knc(X,y):
    model = KNeighborsClassifier()
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)
    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)
    
    m = mean(scores)
    
    return m

def svc(X,y):
    model = SVC()
    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=25)
    scores = cross_val_score(model, X,y, scoring='balanced_accuracy', cv=cv, n_jobs=-1)
    
    m = mean(scores)
    
    return m

model = BalancedRandomForestClassifier()

param_grid = {
    'n_estimators': [3,10,30],
    'max_features': [3,6,9],
}

cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state = 25)

rnd_search_cv = RandomizedSearchCV(model, param_grid, n_iter=10, cv=3,return_train_score=True)
rnd_search_cv.fit(X,y)

scores  = cross_val_score(model, X,y, scoring = 'balanced_accuracy', cv=cv, n_jobs=-1)
    
m = mean(scores)

m

rnd_search_cv.best_params_

rnd_search_cv.best_estimator_

final_model = rnd_search_cv.best_estimator_

final_model.fit(X,y)

y_pred = final_model.predict(x_test)

y_pred.shape

accscore = accuracy_score(y_test, y_pred)
f1score = f1_score(y_test, y_pred, average = None)
print(accscore*100)
print(f1score*100)

test_result_df = pd.DataFrame(y_pred)
test_result_df.shape

frames = [test_dataset['id'], test_result_df]
result = pd.concat(frames, axis=1, join='inner')
display(result)

result.to_csv('nssc_26_1.csv', index = False)